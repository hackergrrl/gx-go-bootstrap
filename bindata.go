// Code generated by go-bindata.
// sources:
// data/Makefile
// data/bin/check_go_path
// data/bin/check_go_version
// data/bin/check_gx_program
// data/bin/dist_get
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _makefile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x55\x6d\x6f\xe2\x46\x10\xfe\xcc\xfc\x8a\xd1\x1d\xd1\x81\x5a\x9b\xbc\xb4\xd7\x0a\x09\x35\x24\x71\x12\xa4\xc4\x40\x20\xed\xdd\x7d\xb1\x0c\x5e\x9b\x4d\x6c\xaf\xcf\xbb\x26\xa4\x55\xfe\x7b\x67\xfd\x86\x49\x49\x53\xa9\x96\x30\xbb\xf3\xcc\xec\x3c\xf3\xb2\xe3\x8f\x78\xcb\x63\x1e\x65\x11\xae\x59\x2a\xb9\x88\x31\xce\xa2\x05\x2d\xd1\x17\x29\x4a\xe1\xab\x27\x37\x65\x98\xb2\xef\x19\x4f\x99\x87\x4a\xe0\x22\xe3\xa1\x87\xa3\xc9\xe5\x0c\xf4\xcb\xb9\x1d\xd9\xce\xd5\xd8\xf9\xdd\xba\x9b\x8d\xc6\x36\x0e\xf0\xc8\xfc\xd9\x3c\x6e\x60\x5f\x1a\xd8\xa1\xf9\x79\x07\x79\x65\x78\x04\xc0\x7d\xf6\x1d\x3b\xed\xce\xdc\x9a\xcd\x1d\x7b\xec\x5c\xde\xcf\xac\xee\x8f\x47\x5d\x40\x0c\x84\xa3\x98\x54\x83\x40\xa0\xfe\x47\x43\xb9\x81\xc4\x58\xf8\x99\x64\xc0\x42\x7a\xfd\x43\x07\x58\xec\x71\x1f\x00\x3c\x2e\x95\x93\x0a\xa1\x06\x3d\x9e\xf8\xb2\x37\x8d\xbe\x7c\x9b\xfe\x79\x36\xbc\xcc\x84\x75\xf3\x74\x62\xab\x87\xe9\xb7\xeb\xc7\x3f\x66\xde\xf0\xe4\xe4\x78\xf2\x3c\xbd\x7f\xf8\x9c\x4c\x1f\xb2\x95\x95\x3d\xae\x83\x5f\x21\xd8\x38\x0b\x1e\x0f\xe8\xd7\x0b\x36\xc6\xfa\xd0\xfc\xc5\x3c\x24\xa1\x41\xee\x1a\xf2\x40\x18\xeb\x23\xf3\x98\x20\xf8\x88\x44\x0a\xd5\x8a\xc7\x44\x91\xc7\x28\xb2\x14\x49\x0b\x17\x8c\x12\xcb\xd0\x8d\x9f\x51\xa8\x15\xa3\x1c\x3f\x4b\xc5\x22\x8d\xb9\x29\x67\x12\xd8\x26\x11\xa9\xc2\xc9\x70\x7e\x8d\xfd\x81\x96\xf7\xdb\x1d\xbd\xeb\x56\x50\x9e\xbf\xe1\x64\x84\xbf\x0d\x70\x7d\xf8\xd3\xc6\xd4\x01\x99\x5c\x00\xb8\x61\xd8\xc7\x15\x0b\x13\x00\x22\xb6\x5c\xb1\xe5\x63\x1f\x5a\xa7\x9a\x5d\xbe\x71\x48\x5a\xd5\xb9\xdd\xd9\x53\xbd\x2e\x40\x15\xe2\x81\xb6\x64\xcb\x95\xc0\x0f\x3c\x96\x8a\x8e\xa6\x50\x30\xd8\x90\xe1\x69\xbf\x54\x3a\x18\x1c\x74\x3f\x94\x0e\xf2\x04\x07\x4c\x61\xfb\xaf\x3a\xd7\x2f\xb9\xfe\xe9\x6b\x13\x68\xa5\x11\x1a\x3e\x16\x22\x68\x85\x31\x1a\xb2\x56\xd2\x1a\x15\x04\x8d\xc4\xbe\x45\x88\xc0\xa6\x03\x52\xfd\x2f\xb4\x72\xab\xd3\x3d\x86\xbb\xe4\x48\xfa\x2f\xfc\x34\xaa\x5b\xa3\xc8\x34\xb9\x28\xda\xe4\x25\x5f\x95\xbd\xf1\x02\x90\xb8\x6a\xf5\x46\x35\x34\x44\x27\xa7\xcc\x0d\xcb\xa5\xa4\xfa\x85\x98\x3c\x79\xdd\xee\x2e\x70\x35\xce\xbb\xa0\x27\xd3\x65\x2f\xe0\x6a\x95\x2d\xcc\xa5\x88\x8a\x6e\xe6\x09\x85\x48\xc5\xf3\x58\x22\xfb\x58\xd5\x1e\x2b\x6a\xb8\x65\x00\xad\x2d\x4b\xc3\xa0\x66\x58\x08\xea\xd3\x32\xa1\x24\x09\x42\xb1\x70\x43\xba\x86\x85\xa4\x8f\xfa\x48\x68\x51\xb6\x4a\x09\xd5\x44\x0f\x80\x06\x90\xef\x01\x96\x21\x73\xe3\x7e\x91\xbe\xd4\x47\xb3\x20\x05\x90\xc5\xd5\x59\xb9\x76\xae\x86\x7b\x03\x00\x98\x5c\x8f\xed\xaf\xf8\xc3\x00\x35\x19\xdd\xc8\x75\x08\x5b\xa8\x8e\x4e\x13\xa8\x99\x17\x53\xa9\x98\x05\xa5\x8f\xda\x31\xdd\xc6\xff\xf5\xd0\x65\x1e\xa2\x64\x11\x37\x34\x25\x3f\x2b\xa9\x45\x4c\x4a\x37\x60\x00\x7a\x57\x37\xe7\xa7\x0b\x6b\x62\xd9\x17\x96\x7d\xfe\x15\xe7\xc3\xbb\x2b\x6b\x3e\xeb\x7f\xaa\xc1\xed\x0a\xb7\xd5\x29\x1f\x03\x47\x05\x5f\x89\x34\x7b\xb3\x24\x48\x5d\x8f\x49\x7d\x85\xdc\xd8\x2b\x5a\xb6\x69\x9e\x87\xdf\x78\x0c\xbc\x10\x4f\x71\x28\x5c\x4f\x43\x34\xf7\x58\xbc\xa4\x81\x42\x73\xa8\xb8\x27\xfb\x48\x9c\xdd\x8f\x6e\x2e\xde\xa1\xa9\xb3\xdb\x70\x92\xa4\x3c\x56\x7a\xb0\xc9\x9d\x2c\x34\x2d\x8a\x5a\xd4\x16\x67\xf9\x36\x1f\x70\xcf\x4d\xb5\xaa\x74\x7b\xd4\xf2\x88\x2b\x9c\xfc\xd1\x5d\x6d\x17\xfd\xdf\x23\x85\x7d\x3c\xcf\x6f\xac\xa1\x3d\xb2\xaf\xde\x09\xa6\xe8\x8c\x9a\xda\x1d\x8b\xc4\x9a\x55\x4e\xfd\x54\x44\x25\x79\x8f\xbe\x76\x4b\x25\x76\x09\xd7\x0d\xf5\xa6\xf1\x7b\x2c\xf5\x47\xed\x7d\x92\xe7\xe3\x5b\xad\x34\x1b\x8f\xed\xce\xfc\xb6\xdb\x54\xda\x5e\x83\x62\xcc\x9b\xf9\x9e\x46\x4f\x27\x5f\x74\xe1\xef\x00\x00\x00\xff\xff\xce\xd0\xcf\x61\xd1\x07\x00\x00")

func makefileBytes() ([]byte, error) {
	return bindataRead(
		_makefile,
		"Makefile",
	)
}

func makefile() (*asset, error) {
	bytes, err := makefileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Makefile", size: 2001, mode: os.FileMode(420), modTime: time.Unix(1465078567, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _binCheck_go_path = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x8f\x3d\x4f\xf3\x40\x10\x84\xeb\xf7\x7e\xc5\xc4\x6f\x24\x37\x84\x28\xb4\x28\x05\x02\x0b\x3a\x5c\x44\x02\x09\x28\x6c\xe7\x6c\xaf\x70\x6e\xad\xbb\x3d\x12\xf3\xeb\xd9\x90\x98\x0f\x85\xee\x34\xa7\x9d\xe7\x99\xff\x93\x79\x49\x6e\x1e\x5a\x63\xf2\x87\x9b\xe5\x74\x61\xb2\xc7\x3c\xbb\x5e\x65\xfa\xbe\x30\x86\x6a\x3c\x61\xf6\x8e\x64\xaa\xbf\x09\x5e\x2e\x21\xad\x75\xe6\x9f\xad\x5a\x46\xb2\x89\x41\xd0\x17\x21\x80\x1c\x06\x8e\x1e\x55\xf4\xde\x3a\xc1\x96\xfd\x2b\xb9\x06\x6b\xf2\xb6\x12\xf6\x43\xa2\x37\x3b\x12\x2c\x4c\x4d\x3f\x6b\x6f\xef\xf3\xab\xd5\xdd\x49\xf3\x21\x86\x63\x41\xb0\x72\xb6\x2f\xc7\x27\xad\x2d\xde\x2c\x1a\x46\xc5\xae\xa6\x26\x7a\xbb\x46\xef\xb9\xb7\xbe\x1b\x20\xac\x1e\x41\x8a\xae\x03\xf5\x75\xf8\x03\x79\x9c\x31\x59\xea\x6b\xdc\x79\xc2\x6e\x78\xb6\x3f\x3f\xf0\x4a\x8b\x32\x52\x27\xa8\x3d\x6f\xb0\x25\x69\xc7\xa9\xcf\x47\xf7\xef\x8d\xe7\xc9\x58\x61\x77\xbd\x46\xea\x96\x7e\x61\x52\xed\x11\x35\x17\xcd\x54\x22\xfd\x65\xf7\x11\x00\x00\xff\xff\x7c\xf5\xb9\x46\x86\x01\x00\x00")

func binCheck_go_pathBytes() ([]byte, error) {
	return bindataRead(
		_binCheck_go_path,
		"bin/check_go_path",
	)
}

func binCheck_go_path() (*asset, error) {
	bytes, err := binCheck_go_pathBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bin/check_go_path", size: 390, mode: os.FileMode(493), modTime: time.Unix(1465078567, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _binCheck_go_version = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x56\x6f\x4f\x23\xb7\x13\x7e\xbf\x9f\x62\xce\xc9\xef\x42\xd0\xaf\x1b\x42\xd5\x37\x41\xa0\x46\x94\xe6\x52\x95\x80\x12\xa8\x2a\x95\x76\x65\x12\x67\xd7\x65\x77\xbd\xb7\xeb\xe5\x40\x77\xf7\xdd\x3b\x63\xc7\x8e\xc3\x85\x8a\xf2\x22\x22\xe3\xf1\xf3\xcc\x33\x7f\x3c\xe9\xbc\x1b\xdc\xcb\x72\xd0\x64\x51\x27\xea\xc0\x79\x26\x96\x0f\xa0\x33\xae\xf1\x43\x40\xaa\xe0\x51\xd4\x8d\x54\x25\xc8\x06\xd0\x98\x0b\xde\x68\x10\x1f\x5b\x9e\x83\x56\xc0\xa1\x90\xa5\x2c\xda\xc2\xb9\x21\x44\xd9\x16\xf7\xa2\x8e\x2d\x1c\xcf\x73\x90\x1a\xd6\xaa\x06\xf1\xc4\x8b\x2a\x17\x90\xcb\x07\x81\xe0\xb2\x19\x19\x17\x80\x2e\x2c\x89\x35\x49\x55\xe2\xc8\xd8\x30\xfe\x21\x3e\x66\xe8\x10\xdd\x2e\xc6\x93\x8b\x53\xd6\x3d\x82\xc9\x55\x72\x39\x9d\x25\xbf\x5d\xcc\x17\xd3\xab\x19\x8b\xa2\x95\x14\x07\x7d\xf8\x1c\x21\x06\x54\xb5\x2c\xf5\x1a\xce\xde\x1f\x03\x5b\x73\xcd\xf3\x11\xfc\xaf\xb9\x2b\x19\xb0\xee\x8f\xcc\x78\x88\x27\x0c\x64\x18\x7d\x8d\x90\x74\x22\x34\xf0\x3a\x6d\x0b\x51\xea\x26\x8a\xb4\x40\x51\xac\xdb\x61\xf0\x9d\xf8\x88\xe4\x0c\xbe\x7c\x01\x44\x07\x76\x83\x71\x22\xb6\x4a\x6b\x5e\x40\xd1\xa2\xdb\xbd\x80\x8a\x37\x8d\x58\x91\xa0\xa5\xce\x9f\x61\xb8\x85\x42\xba\xdb\x86\xa7\x62\x04\x5d\x13\x37\x06\xb9\x1b\x35\x0a\x19\xa2\xf1\xf6\x7a\x32\x1f\xff\x74\x91\x5c\x2e\x26\xa7\xec\x9a\x92\x8a\x29\xe1\x98\x17\x0e\xb9\x52\x0f\x94\xe9\x4c\xeb\xaa\x19\x0d\x06\xa9\xca\x79\x99\xc6\xaa\x4e\x07\x2b\xb5\x1c\xc8\xb2\xd1\x94\x54\x4c\xbe\xfb\x17\x73\xdb\x56\x18\xe0\x8a\xea\x15\xdb\xbc\x24\x1b\xcb\x7f\xc8\x4f\xe8\x71\x7a\xe6\x4f\x83\x50\x5f\xe6\xb1\xe0\x7f\xab\x3a\xb1\xf5\xf6\x44\x54\xc2\x8d\x4a\xfa\xda\x81\x0f\x1c\x3b\x8a\xd7\xaa\x2d\x57\xd0\x13\x4f\x55\xdd\x33\x10\xb2\x4c\xe1\x93\xd4\x19\x2c\x15\x06\x3e\x84\x4f\x99\x28\xa9\x55\x54\xab\xab\x56\x37\x70\x64\xae\x2f\x29\x33\xac\x4b\xa0\x0c\x05\x1b\x1b\xfd\x1d\xf5\x41\x2c\x33\x05\xec\x88\xc1\xc9\xc9\xd6\x1c\x1f\xee\x3f\x20\x33\x52\x7b\xa8\x11\xb0\xbb\x83\x3f\xfe\x8a\xff\x3c\xbc\xeb\xc7\x87\xa6\xde\xb5\xd0\x6d\x5d\xa2\x32\x23\xb2\xe1\x4b\x92\x68\x3b\x93\xeb\xc4\x34\xbe\xeb\x4f\x2f\xd6\x55\xd6\x0a\x26\xcb\xf9\xed\xdc\x59\x8e\xad\xe5\x7a\x7e\x35\x49\x66\xe3\x4b\x6a\xe2\xef\x7d\x56\xa8\x03\x4d\xfe\xfe\x4f\x23\x84\x25\xe4\x98\x9e\xb5\x7c\xda\x8c\x4f\x63\x47\x86\x2f\x33\x3f\x59\x8e\xef\x72\xfc\xcb\x69\xf7\x20\xcc\x3d\xaa\x72\x81\xb0\xbe\x6f\xdd\x99\xb2\x04\x7e\x82\x37\xce\xb2\x84\x9e\xf7\xef\x19\x9e\x5e\xd7\x07\xd9\xdb\xca\xd8\x4b\xe4\xf4\xbd\x95\xc8\xf9\xef\x23\x32\x4c\x72\x6d\x55\x4d\x67\x48\xb6\xa9\x91\x57\x43\x75\xb2\x55\x8a\xc3\x72\xf5\x4f\xe8\x75\xda\x76\x03\xf9\xff\x3c\xfd\xfd\xdf\x01\xf6\xe1\x90\x06\x77\x19\x3b\xc6\x96\x3e\x6f\xc4\x0e\x32\x85\xe6\x0e\x43\x36\x67\x5b\x4b\x27\xc4\x64\x2d\x14\xe2\xb3\xf5\x46\x21\xe4\xbf\x23\x64\x1f\xc0\x6b\x42\xdc\xe5\xbd\x42\x5c\x68\xa1\x90\x97\x17\x50\xc8\xa6\x3b\xcf\x55\x51\xf1\x5a\xb8\x8a\x36\xc6\x4c\x71\x24\xbf\x5e\x8c\x17\x37\xd8\xc9\xbe\x8e\xbe\xea\x61\xad\x9b\x4c\xb5\xf9\x8a\xde\x4a\xbf\x33\x82\x9e\xb3\x6c\x9b\x47\x77\xd3\x69\xf8\xf4\xa6\x1a\x76\x0a\x68\xad\x30\x74\x9d\xe6\xde\x34\x3c\xde\x86\xf2\x3a\x56\x00\x82\xf7\x3f\x7b\xd5\xa1\xef\x74\xb6\x8f\xd7\x58\xdf\xc4\xfb\x1a\x5e\x00\xb4\xc3\xfd\xc2\x1f\x93\x4f\xfe\x62\xe3\x6f\xbe\xbe\x89\xf3\x6b\x64\x3f\xcd\x32\xfb\x76\x67\xe3\x42\xe7\xf5\x33\x3d\xb3\x48\x45\x0f\x0b\x2e\x31\x9c\x46\x3a\xad\xb8\xce\x70\xe1\x3d\x57\xc6\xf1\x6c\xb0\x12\x8f\x83\xb2\xc5\x2d\x72\x7c\xf6\x7e\xf8\x0d\x39\xba\xe0\xd5\x52\x69\xb7\x6c\x70\xed\xe1\x18\x5b\x83\xc1\xbb\x1e\xdf\x7c\x78\xc7\xc2\x30\xc2\x08\xdc\xdb\x15\x19\x11\x8b\x9b\x39\x76\x76\xf0\x9b\x82\x38\xb7\xef\x48\x6f\x7b\x82\xaf\x05\x97\x44\x66\x36\x84\x5d\x09\xb8\x53\x1d\x8a\x5d\xab\xae\xdd\x68\xad\xfa\x02\x7a\x17\x1a\x98\xf8\x30\x20\x4b\x15\x4d\x0c\xd0\xc4\x80\x1b\x19\xc3\x3b\x2d\x1f\x79\x2e\x71\x39\x85\xfc\xfb\x38\xf7\x2f\x03\x24\x7d\xf1\xcb\xc4\x5a\x82\xf0\x18\x65\x92\x45\xff\x04\x00\x00\xff\xff\x50\x3c\xe0\x52\x6b\x09\x00\x00")

func binCheck_go_versionBytes() ([]byte, error) {
	return bindataRead(
		_binCheck_go_version,
		"bin/check_go_version",
	)
}

func binCheck_go_version() (*asset, error) {
	bytes, err := binCheck_go_versionBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bin/check_go_version", size: 2411, mode: os.FileMode(493), modTime: time.Unix(1465078567, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _binCheck_gx_program = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x56\xdf\x73\x1a\x37\x10\x7e\xbf\xbf\x62\x23\x68\x30\x4c\x7d\x06\xfc\x66\x8f\x3d\x65\x5c\x4a\xe9\x14\xe2\x01\xbb\x93\x99\xba\xbd\x91\x41\xdc\xa9\xb9\x1f\xe4\xa4\x73\xc8\x24\xf9\xdf\xbb\x92\x4e\x42\x90\x73\xc6\xce\x43\x3c\xac\x56\xfb\xed\xb7\xfb\x69\xf7\x5a\x6f\xce\x1e\x79\x7e\x26\x92\xa0\x15\xb4\xe0\x26\x61\xab\x0f\xc0\x37\x40\x21\xde\xc1\xb6\x2c\xe2\x92\x66\xc0\x05\xf0\x5c\x48\x9a\xa6\x6c\x0d\x34\x5f\x2b\x07\x2e\x05\x3c\xb1\x52\xf0\x22\x57\xe7\x54\x42\xca\xa8\x90\x18\x83\x7d\xac\x68\x0a\xb2\xc0\x18\x19\xcf\x79\x56\x65\xce\x31\xaf\xb2\x47\x56\x86\x06\x0a\xc3\x61\x14\xd8\x14\x25\xb0\x1d\xcd\xb6\x29\x83\x94\x7f\x60\x20\x13\x2e\x2e\xb4\x0b\x40\x1b\x56\x2a\xa3\x28\xde\x45\x36\x19\x12\xef\x4e\xe3\x82\x00\xe9\x87\xc3\xb0\x8f\x7f\xef\x05\x83\x4e\x46\xf1\x26\x7a\x55\x5b\x74\x5a\xb3\x8e\xc2\xaf\x73\x06\x04\xa8\xcd\xa0\xef\x86\x44\x47\x2f\xca\x1f\xa3\x68\x88\xf3\x57\x03\xe8\xe8\xc1\xfd\x72\x34\x19\x5f\x91\x76\x1f\x26\xef\xa3\xdb\xc5\xbb\xc9\x62\x34\x8b\xe6\xa3\xd9\x58\xfd\x9e\x4d\xe7\xd1\x5f\xe3\xc5\x72\xfa\x6e\x0e\xf7\xb7\x78\xf4\xeb\x38\x9a\x2d\x27\x24\x08\xd6\x9c\x9d\x74\xe1\x4b\x80\x49\x61\xf5\x79\x2e\x37\x70\xfd\x76\x08\x64\x43\x11\xe8\x02\x7e\x12\x0f\x39\x26\xd4\xfe\x85\x68\x0f\xb6\xc3\xfa\x0d\x82\x6f\x01\xb2\x98\x30\x09\xb4\x8c\xab\x8c\xe5\x52\x04\x81\x64\x42\xa2\x63\x8b\xc0\x29\xfb\x08\x04\x69\x7c\xfd\x0a\x18\x1d\xc8\x1d\x96\xd7\x75\x36\xab\xd0\xed\x91\xc1\x96\x0a\x81\xbd\xc5\x3e\xac\x64\xfa\x19\xce\xf7\xa1\x34\x7f\x1a\xb3\x0b\x68\x6b\x4e\x98\xe4\x11\x23\x64\x39\x20\xc1\x21\x2d\xb4\x0d\x49\xe0\x71\x43\xc3\xb9\xe1\x67\x2b\xf8\x0a\x9e\xbe\xc7\xd5\xb5\x3b\x3d\x28\xdd\x61\x3d\x32\xfa\x5f\x51\x46\x46\x6e\x0e\x48\xa9\xd0\x24\xab\x7f\xb6\xe0\x77\x8a\x62\xa7\x65\x51\xa1\xa4\x3b\x6c\xb7\x2d\x3b\x3a\x04\xcf\x63\xf8\xc4\x65\x02\xab\x02\x3b\x3a\x80\x4f\x09\xcb\x95\x52\x8b\x4a\x6e\x2b\x94\x7d\x5f\x5f\x5f\x51\x94\x05\x69\xab\xa0\x04\x95\xa0\x6d\xea\x5f\xbf\x0b\x6c\x95\x14\x28\x1e\x02\x97\x97\x7b\x73\xd8\x6b\x3e\x50\x66\x84\x76\xa1\x2e\x80\x3c\x9c\xfc\xfd\x6f\xf8\x4f\xef\xa1\x1b\xf6\x74\xdf\x4a\x26\xab\x32\x47\x66\x9a\xa4\xa0\x2b\x45\xd1\x48\x96\xca\x48\xbf\xbb\xa8\x7e\x62\x8e\xac\x6d\x86\x21\xac\x2c\x37\xf7\x0b\x6b\x19\x1a\x8b\xea\xa2\x6d\xe1\xb9\xab\x8a\x52\x92\xae\xdf\xcf\xea\xfd\xa2\xb6\xd5\x8b\xdf\xf0\x5d\xfd\x7a\x85\x79\xb1\x74\x95\xd8\x67\xed\xf0\x66\xa3\x3f\xae\xda\x27\x7e\xed\x91\x95\x4d\x84\x74\x9d\x04\xe7\x85\x01\x38\x9a\x0b\x58\x45\xe8\x38\xff\x8e\xc6\xe9\xb4\x5d\x92\x9d\x3d\x8d\x46\x20\xcb\xef\xa5\x40\xd6\xbf\x09\x48\x23\xe1\x94\xd3\xac\xa6\x73\x04\xab\x7b\xe4\xd8\xa8\x3e\x99\x2e\x85\x7e\xbb\xba\x97\x38\xbf\xd8\x5e\x0d\xca\xff\xb7\xe9\xfb\x1f\x07\x68\x8a\xa3\x38\xd8\xcb\xa8\x18\xd3\xfa\x54\xb0\x83\xc8\x2a\x35\x7b\xe8\xa3\x59\xdb\x86\x5b\x22\xba\x6a\x3e\x11\x57\xad\x17\x12\x51\xfe\x07\x44\x9a\x02\x3c\x47\xc4\x5e\x6e\x24\x62\x53\xf3\x89\x1c\x5f\x40\x22\xb5\x3a\x6f\x8a\x6c\x4b\x4b\x66\x3b\x2a\xb4\x59\xe5\x11\xfd\x39\x1e\x2d\xef\x50\xc9\xae\x8f\xae\xeb\x7e\xaf\x45\x52\x54\xe9\x5a\xcd\x3c\xbb\xb2\x7c\xcd\x19\xb4\x7a\x78\xd6\x4a\xc3\x11\x1a\x4b\x38\x68\xa0\xb1\xc2\xc0\x2a\xcd\xce\x34\x3c\xde\xa7\xf2\x7c\x2c\x2f\x08\xde\xff\xe2\x58\xfb\xbe\xd3\x79\x13\xae\xb6\xbe\x08\xf7\xb9\x78\x5e\xa0\x03\xec\x23\x7f\x2c\xbe\xf2\x67\xb5\xbf\xfe\xf9\x22\xcc\x6f\x81\xf9\x5f\x2f\x25\xf3\x39\x21\x13\x2c\x35\x8a\xc9\xff\xa4\xc0\x39\x2b\xf4\x9e\xfa\xbc\x55\x91\x8e\x56\x0a\x81\xeb\xb3\x35\x7b\x3a\xcb\x2b\xdc\xae\xc3\xeb\xb7\x83\xef\xb0\x6f\xeb\x38\xc7\x37\xd5\xb7\x48\x5e\xc8\xfd\xf7\xca\x1b\xe2\x27\x72\x90\x83\x1d\x5f\x81\xe6\xb1\xbc\x5b\xa0\xb8\xbf\x8b\x77\xfa\xa4\x13\xd8\xcf\x94\x4e\x83\x0b\x8e\x10\xca\xd5\xc7\x91\x5e\x1b\x66\x4f\xe0\xc2\xb4\x71\xcd\xce\xb4\x1a\x54\xeb\xd1\x75\xd5\xb9\xa8\x57\x14\xf6\x8e\x63\x87\x3d\x27\xe2\x87\x93\x10\x5f\x94\x37\xdc\xa6\xf9\x13\x4d\x39\x6e\xae\xc6\x84\x9a\x92\x68\x5e\x19\xa6\xfc\xde\xf2\x26\xc6\xe2\xe5\x4b\x1a\x5a\x14\xfc\x1f\x00\x00\xff\xff\xd9\xd5\x41\x1a\x3a\x0a\x00\x00")

func binCheck_gx_programBytes() ([]byte, error) {
	return bindataRead(
		_binCheck_gx_program,
		"bin/check_gx_program",
	)
}

func binCheck_gx_program() (*asset, error) {
	bytes, err := binCheck_gx_programBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bin/check_gx_program", size: 2618, mode: os.FileMode(493), modTime: time.Unix(1465078567, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _binDist_get = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x56\x4d\x73\xdb\x36\x13\x3e\x8b\xbf\x62\x03\xeb\x8d\xac\xb7\x96\xe4\xb8\x39\xd9\xb5\xdb\x4e\x3b\xd3\xde\xdc\xe9\xc7\xa9\xe9\x68\x60\x12\x22\x31\x21\x01\x06\x00\xf5\xe1\x24\xff\xbd\xbb\x00\x48\x91\x74\xa2\xf1\xb8\x17\x89\x00\xf6\xe3\xd9\xc5\xb3\x8b\x3d\x7b\xb5\x7a\x90\x6a\x65\x8b\x24\xc9\xa4\x38\x9f\xc3\xc7\x64\x22\xd2\x42\x03\x9b\xfe\xc0\xe0\xee\xf5\x15\x2e\xf7\xd2\xc1\x9b\xe4\x73\x92\x14\x7c\x2b\xd6\x28\xce\xcd\x21\x48\xba\x43\x2d\x50\xf2\x0d\x4a\xc2\x2a\x13\xdb\x95\x6a\xca\x12\xae\x7a\x0b\x52\x4b\x0b\x91\xbe\x5f\xef\x8c\x74\x82\x3f\x94\xd1\x49\x6d\xa4\x72\x1b\x60\xa4\xea\x2d\xbc\x7e\x0d\xa6\xf2\x9f\xa4\x93\xe9\x9d\x2a\x35\xcf\x82\x70\x56\xae\x1b\x53\xde\xfa\x43\x5a\xe8\xc6\xd5\x8d\xc3\xf5\x15\x4b\x10\x85\xb0\x0e\x15\xcf\x18\x2c\xc4\x07\x60\x57\x0c\x3e\x7d\x02\x8c\x06\x58\x6b\x05\x8c\xf8\xd0\x48\x23\x2c\x88\x3d\x4f\x5d\x79\x00\xb7\xd3\xc0\x4d\xde\x54\x42\x39\x7b\x01\x3b\x6e\x21\x97\x5b\xa1\x00\xc3\x46\x93\x72\x03\xaf\x60\x84\x1b\x5d\x74\xae\xd9\x0d\xb8\x42\xa8\x64\x32\x19\xfa\x11\xc6\x68\x73\x0d\x29\x57\x4a\x3b\xf0\xaa\xe0\x34\xf4\x14\x93\xc9\x46\x06\x07\xbd\x6c\xc2\x2e\x17\xae\x33\x19\x53\x33\xbb\xbd\xbd\x83\xbf\xac\x54\xb9\x3f\x26\x3b\x9d\x1f\xf6\x3f\xcb\x68\x83\xfe\xdf\xa9\x59\x80\x86\x29\x62\x03\x90\x68\xcb\x6b\x1e\x4f\x17\xf7\x03\x01\x4a\x94\x11\xae\x31\xe8\x56\x94\x23\x4c\x29\x6a\x9c\xc0\x44\xc7\x2f\xc3\xe4\x35\x17\x0b\x2b\x4b\x4c\x7e\x4f\xec\xee\xf9\xd8\x36\xc2\xa5\xc5\x09\x70\xfe\xfc\x65\xe8\x82\x6a\x2f\x65\xfa\x04\x2c\x2b\x5a\x0a\x28\x0d\x2d\x36\xdd\xa8\x6c\xe0\x3b\xda\x5a\x02\x95\x12\xc2\x5b\x06\x16\xc4\x42\x23\xd4\x9d\x68\xaa\xab\xba\x14\x4e\xbc\xf2\x55\xd0\xa0\xc1\xb4\x40\x5e\x86\x32\x68\xf8\x3a\xae\xa9\xf0\x62\x39\xe0\xa6\x54\x1b\xcc\x65\x28\x07\x5a\x23\xd4\xb8\xf1\x6d\xd8\xc8\xa4\x75\x8a\x57\xb4\xf3\xf6\x04\xbd\x8f\xaa\x23\x7e\x77\x38\xbe\x4a\xf0\x9e\x6a\x64\x78\xca\x6d\xb4\xd9\xc3\xcc\x40\x92\x51\xc7\xcd\x32\x7f\x9c\xe3\xd7\xb8\x10\xf0\xa4\x73\x3d\xe9\x25\xa8\xf1\xd7\x3a\xc3\xe3\x19\xf9\x13\x7b\x67\xb0\x90\xbb\x94\x1b\x5d\x41\x74\xc3\xbc\x66\xca\x5d\x70\x1e\x72\x83\xd7\x46\xa6\x89\xff\x8b\x47\x58\xec\xc3\x59\x9b\x96\x55\x7f\x11\x78\x38\x88\x67\xd2\xde\xf4\x93\xbb\xd6\x0a\xec\xc1\x3a\x51\xe1\xad\x9b\x16\x15\x21\x25\x67\xa4\x6d\xbd\x3a\x5d\xf6\x64\x72\x73\x83\xbf\x8f\xb2\xfe\x52\xdc\x8d\xc2\x83\x53\x91\x7b\x81\xe7\xc5\xee\x45\x61\x51\x0f\x13\xf0\x5f\x23\x96\xca\x3a\x5e\x96\x22\x83\x4a\xb8\x42\x67\xe3\x88\x97\xe4\x34\xe2\x78\x12\xf5\xff\x7d\xcc\x91\x4b\x46\xa4\x3a\x57\xf2\x11\x4d\xb5\xb4\xf2\x0f\xc9\x6c\x44\x96\x19\x5a\x11\x96\xa7\x44\xa6\xa2\x42\x8f\xdf\xec\x47\x38\xb1\x44\xb0\xbf\xad\x73\xbd\xde\x72\x63\x43\x91\x60\x62\xff\x46\x76\xe3\x35\xb3\xe9\x2f\xf7\xf7\x7f\x30\xf8\x87\xde\x96\xde\xde\x8f\xbf\xff\xf4\x2b\xee\x8e\xdb\x07\x76\x86\x05\x35\x89\x56\xad\x13\xfd\x72\xcb\xce\xf5\xd7\x0d\x9c\xe7\x78\x4d\x6a\x0b\x64\x68\x3e\xdc\x20\x8b\x73\xf6\xa4\x77\xec\x38\x92\x69\x03\x19\x96\xbe\xa9\xa4\xa2\x84\x46\x62\x91\x0d\xe0\xd8\x51\x82\xee\x3b\xf5\x5b\x29\xa8\xb4\x2a\xae\x1a\xbc\x8f\x03\x58\xec\xf0\x23\x21\x0f\x8c\xda\x94\x39\xc4\x5e\x83\x99\xaa\xde\x63\x0f\x0a\x39\xaa\xd6\x46\x6b\x17\x1b\x48\xb5\x8e\xad\xe1\xca\x2f\xb6\xc2\xd8\xd8\x39\xaa\xf6\x36\x42\xdf\xc0\x75\xae\x29\xd1\xb7\x18\xcf\x31\xed\xf3\xee\xb9\x4d\x75\x53\x66\x40\x8d\x81\x5e\x9d\x18\x32\x89\x50\xcf\x09\x8c\x2e\x9c\xab\xed\xf5\x6a\x25\xeb\x8d\x5d\x4a\x3d\x0d\x48\x56\xd3\x00\x82\xfe\xc9\xff\x6a\xfa\x31\x6c\x7c\x5e\xd3\x17\x6d\xe1\x57\xeb\x7e\x39\xed\x80\x85\x59\x01\x79\x7c\x8c\xa7\xd7\xeb\x30\x20\xea\xda\xdc\x15\x21\x20\xb2\x23\xb5\x8a\x5d\xd0\x13\xc5\x53\xa2\x35\x40\x54\xc1\x58\x7a\xbb\xa1\x3c\xfa\xbb\xd1\xe0\x70\x33\x1a\xee\x91\x2a\x50\xdd\xf2\x5c\x5c\x03\x19\x5a\x53\x46\xbe\x6b\x1d\xdd\x85\x4f\xb2\x8e\x9f\xd1\x24\x7e\x45\x3b\x77\x2c\x21\xc6\xf9\x0e\xda\xda\xf6\x8d\x73\xeb\xeb\xe8\x0c\x5f\x09\x83\x45\xe4\x70\x0f\x9f\xa4\x24\xd4\x98\x3f\x0a\x49\x96\x6a\xcb\x4b\x99\x41\xab\x3a\x6b\x8d\xcc\xe2\x48\x17\xe0\xc5\x4d\x0b\x55\x83\x03\xd4\x83\xc8\xa5\x82\x9d\x74\x05\xcc\xb6\xb3\x8b\x58\xde\x9c\x9e\xa3\x6b\xd8\x5e\x2e\xdf\x2e\x2f\x59\x70\x15\x6a\xf2\x0c\xfe\xbc\xff\xf9\x1e\xa3\x43\xb3\x0e\x89\x5b\x0b\xa4\x1f\x3a\xc3\xf8\xe9\xea\x9d\xd6\x25\xda\x24\x22\x1f\x3b\x07\x3d\x8a\xc8\x70\x44\xee\x0a\x69\x93\x5c\x23\x41\x5e\x42\xa6\x90\x19\xaf\xee\xf3\x52\x4a\xd5\xec\x17\x3e\x03\x1d\x63\xc3\x1b\x13\x21\x4f\x32\x6e\x76\x52\x9d\x14\xc1\x73\x7c\x86\xed\x48\x06\xbb\x5a\x2b\xb0\x31\x42\x3c\xd8\xec\xa4\x91\xde\x2d\x0c\x1a\x5d\x2c\x66\x04\x2c\x8d\x56\x34\x75\x5e\xc7\x00\x06\x57\x82\xa3\x91\xc1\xb3\x92\x5e\x16\xfc\xf1\x71\x5d\x40\x00\x8f\x53\x6a\x40\xe8\x0b\x3d\x82\xc1\x0e\x2a\xc0\x36\x75\xad\x8d\x43\x37\x0f\x07\x9f\x59\xb0\xa9\x91\x35\x8e\x33\xe1\xaa\xb0\xf4\x33\x69\xe8\x45\xa0\x59\xdf\x55\x35\x4e\x16\x38\x4e\x4f\xcf\x7d\x4b\x18\x14\x40\x9f\xf6\x3d\x5e\xb3\x69\x5b\x70\xf3\x04\xf5\x37\xf2\x96\x45\x53\xab\x4e\x61\xd9\xc9\x1c\xc7\x77\xea\xd7\x61\xc6\xf2\x5a\x2c\x14\xdd\xf4\x7b\x58\x28\x01\x97\xa3\x72\xd9\x70\xd9\x92\xa4\x9b\x9c\xe2\x90\xd9\xaa\x53\x59\x1c\x87\x91\x23\xaa\xce\x41\xbf\x42\x7b\xb1\x3c\xd3\x6f\xfb\xb4\xb6\x0e\x7a\x6e\xff\x0d\x00\x00\xff\xff\xe8\x3c\x2b\x1a\x29\x0d\x00\x00")

func binDist_getBytes() ([]byte, error) {
	return bindataRead(
		_binDist_get,
		"bin/dist_get",
	)
}

func binDist_get() (*asset, error) {
	bytes, err := binDist_getBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bin/dist_get", size: 3369, mode: os.FileMode(493), modTime: time.Unix(1465078567, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"Makefile": makefile,
	"bin/check_go_path": binCheck_go_path,
	"bin/check_go_version": binCheck_go_version,
	"bin/check_gx_program": binCheck_gx_program,
	"bin/dist_get": binDist_get,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"Makefile": &bintree{makefile, map[string]*bintree{}},
	"bin": &bintree{nil, map[string]*bintree{
		"check_go_path": &bintree{binCheck_go_path, map[string]*bintree{}},
		"check_go_version": &bintree{binCheck_go_version, map[string]*bintree{}},
		"check_gx_program": &bintree{binCheck_gx_program, map[string]*bintree{}},
		"dist_get": &bintree{binDist_get, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

